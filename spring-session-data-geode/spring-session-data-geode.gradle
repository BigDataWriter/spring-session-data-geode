plugins {
	id "io.freefair.lombok" version "6.3.0"
}

apply plugin: 'io.spring.convention.spring-module'

description = "Spring Session for Apache Geode"

dependencies {

	implementation "jakarta.annotation:jakarta.annotation-api"
	implementation "org.springframework:spring-context-support"
	implementation "org.springframework:spring-jcl"
	implementation "org.springframework.data:spring-data-geode"
	implementation "org.springframework.session:spring-session-core"
	implementation slf4jDependencies

	compileOnly "com.google.code.findbugs:jsr305:$findbugsVersion"

	optional "org.springframework.security:spring-security-core"
	optional "org.springframework.security:spring-security-web"

	provided "jakarta.resource:jakarta.resource-api"
	provided "jakarta.servlet:jakarta.servlet-api"

	testCompileOnly "com.google.code.findbugs:jsr305:$findbugsVersion"

	testImplementation "org.springframework:spring-web"

	testRuntime "ch.qos.logback:logback-classic"
	testRuntime "org.apache.logging.log4j:log4j-to-slf4j"

	integrationTestCompile "com.google.code.findbugs:jsr305:$findbugsVersion"

	integrationTestRuntime "org.springframework.shell:spring-shell"

}

def jvmArgList = [
	"--add-opens", "java.base/java.nio=ALL-UNNAMED",
	"--add-opens", "java.base/java.util=ALL-UNNAMED"
]

test {

	jvmArgs jvmArgList

	maxHeapSize = project.hasProperty("test.jvm.heap.max-size")
		? project.getProperty("test.jvm.heap.max-size")
		: "512m"

	minHeapSize = project.hasProperty("test.jvm.heap.min-size")
		? project.getProperty("test.jvm.heap.min-size")
		: "512m"

}

integrationTest {

	jvmArgs jvmArgList

	maxHeapSize = project.hasProperty("test.jvm.heap.max-size")
		? project.getProperty("test.jvm.heap.max-size")
		: "2g"

	minHeapSize = project.hasProperty("test.jvm.heap.min-size")
		? project.getProperty("test.jvm.heap.min-size")
		: "512m"

	def gradleProjectPropertyLogbackLogLevel = project.hasProperty("logback.log.level")
		? project.getProperty("logback.log.level")
		: "ERROR"

	systemProperty "logback.log.level", System.getProperty("logback.log.level", gradleProjectPropertyLogbackLogLevel)

}
